
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ recipes      1.0.8
✔ dials        1.2.0     ✔ rsample      1.2.0
✔ dplyr        1.1.3     ✔ tibble       3.2.1
✔ ggplot2      3.4.4     ✔ tidyr        1.3.0
✔ infer        1.0.5     ✔ tune         1.1.2
✔ modeldata    1.2.0     ✔ workflows    1.1.3
✔ parsnip      1.1.1     ✔ workflowsets 1.0.1
✔ purrr        1.0.2     ✔ yardstick    1.2.0
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ purrr::discard() masks scales::discard()
✖ dplyr::filter()  masks stats::filter()
✖ dplyr::lag()     masks stats::lag()
✖ recipes::step()  masks stats::step()
• Learn how to get started at https://www.tidymodels.org/start/
> library(vroom)

Attaching package: ‘vroom’

The following object is masked from ‘package:yardstick’:

    spec

The following object is masked from ‘package:scales’:

    col_factor

> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ forcats   1.0.0     ✔ readr     2.1.4
✔ lubridate 1.9.3     ✔ stringr   1.5.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ readr::col_character()   masks vroom::col_character()
✖ readr::col_date()        masks vroom::col_date()
✖ readr::col_datetime()    masks vroom::col_datetime()
✖ readr::col_double()      masks vroom::col_double()
✖ readr::col_factor()      masks vroom::col_factor(), scales::col_factor()
✖ readr::col_guess()       masks vroom::col_guess()
✖ readr::col_integer()     masks vroom::col_integer()
✖ readr::col_logical()     masks vroom::col_logical()
✖ readr::col_number()      masks vroom::col_number()
✖ readr::col_skip()        masks vroom::col_skip()
✖ readr::col_time()        masks vroom::col_time()
✖ readr::cols()            masks vroom::cols()
✖ readr::date_names_lang() masks vroom::date_names_lang()
✖ readr::default_locale()  masks vroom::default_locale()
✖ purrr::discard()         masks scales::discard()
✖ dplyr::filter()          masks stats::filter()
✖ stringr::fixed()         masks recipes::fixed()
✖ readr::fwf_cols()        masks vroom::fwf_cols()
✖ readr::fwf_empty()       masks vroom::fwf_empty()
✖ readr::fwf_positions()   masks vroom::fwf_positions()
✖ readr::fwf_widths()      masks vroom::fwf_widths()
✖ dplyr::lag()             masks stats::lag()
✖ readr::locale()          masks vroom::locale()
✖ readr::output_column()   masks vroom::output_column()
✖ readr::problems()        masks vroom::problems()
✖ readr::spec()            masks vroom::spec(), yardstick::spec()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(discrim) # for naive bayes engine

Attaching package: ‘discrim’

The following object is masked from ‘package:dials’:

    smoothness

> library(naivebayes) # naive bayes
naivebayes 0.9.7 loaded
> library(embed) #used for target encoding
> library(parallel)
> 
> # Data Gathering ----------------------------------------------------------
> 
> test <- vroom("test.csv")
Rows: 529 Columns: 6
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (1): color
dbl (5): id, bone_length, rotting_flesh, hair_length, has_soul

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> train <- vroom("train.csv")
Rows: 371 Columns: 7
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (2): color, type
dbl (5): id, bone_length, rotting_flesh, hair_length, has_soul

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> # train$color <- as.factor(train$color)
> # train$type <- as.factor(train$type)
> 
> # # EDA ---------------------------------------------------------------------
> # ggplot(data=train, aes(x=type, y=bone_length)) +
> #   geom_boxplot()
> 
> 
> 
> # Data Imputation (Practice) ------------------------------------------------
> #missing <- vroom("trainWithMissingValues.csv")
> 
> #imputeRecipe <- recipe(type ~ . , data=missing) %>% 
>  # update_role(id,new_role="ID") %>% 
>   #step_string2factor(all_nominal_predictors()) %>% 
>   #step_impute_knn(hair_length, impute_with = c('has_soul','color'), neighbors=5 ) %>% 
>   #step_impute_knn(rotting_flesh, impute_with = c('has_soul','color','hair_length'), neighbors=5 ) %>% 
>  # step_impute_knn(bone_length, impute_with = c('has_soul','color','hair_length','rotting_flesh'),neighbors=5)
> 
>   
> #preppedImpute <- prep(imputeRecipe)
> #bakedImpute <- bake(preppedImpute, new_data = missing)
> 
> 
> #rmse_vec(train[is.na(missing)],bakedImpute[is.na(missing)])
> 
> 
> # Prep for Kaggle ---------------------------------------------------------
> 
> # Make function to predict and export
> predict_export <- function(workflowName, fileName){
+   # make predictions and prep data for Kaggle format
+   
+   preds <- workflowName %>%
+     predict(new_data = test, type="class")
+   
+   submission <- as.data.frame(cbind(test$id, as.character(preds$.pred_class)))
+   colnames(submission) <- c("id","type")
+   
+   directory = "./submissions/"
+   path = paste0(directory,fileName)
+   
+   vroom_write(submission, file = path, delim=',')
+   # vroom_write(submission, file = "./submissions/naiveBayes.csv", delim=',')
+   
+ }
> 
> # Recipe ------------------------------------------------------------------
> hauntedRecipe <- recipe(type ~ . , data=train) %>% 
+   # update_role(id,new_role="ID") %>%
+   step_lencode_glm(all_nominal_predictors(), outcome=vars(type)) 
>   # step_dummy(all_nominal_predictors()) %>% 
>   # step_normalize(all_numeric_predictors())
> 
> preppedHauntedRecipe <- prep(hauntedRecipe)
> # bakedHaunted <- bake(preppedHauntedRecipe, new_data=train)
> 
> ## Naive Bayes -------------------------------------------------------------
> #   model
> naiveModel <- naive_Bayes(Laplace=tune(), smoothness=tune()) %>% 
+   set_mode("classification") %>% 
+   set_engine("naivebayes")
> 
> #   workflow
> naiveWF <- workflow() %>% 
+   add_recipe(hauntedRecipe) %>% 
+   add_model(naiveModel)
> 
> #   tuning
> naiveGrid <- grid_regular(Laplace(),
+                           smoothness(),
+                           levels = 25)
> 
> #   folds for cross validation
> naiveFolds <- vfold_cv(train, v=20, repeats=1)
> 
> cl <- makePSOCKcluster(5)
> doParallel::registerDoParallel(cl)
> 
> cvStart <- proc.time()
> #   fit model with cross validation
> naiveResultsCV <- naiveWF %>% 
+   tune_grid(resamples=naiveFolds,
+             grid=naiveGrid,
+             metric_set("accuracy"))
Warning message:
The `...` are not used in this function but one or more objects were passed: '' 
> 
> cvStart - proc.time()
    user   system  elapsed 
  -0.305   -0.028 -235.854 
> 
> #   find best tune
> naiveBestTune <- naiveResultsCV %>%
+   select_best("accuracy")
> 
> #   finalize the Workflow & fit it
> naiveFinalWF <-
+   naiveWF %>%
+   finalize_workflow(naiveBestTune) %>%
+   fit(data=train)
> 
> #   predict and export
> predict_export(naiveFinalWF,"naiveBayesGLM5.csv")
> 
> 
> stopCluster(cl)
> 
> 
> 
> proc.time()
   user  system elapsed 
  4.550   0.361 240.871 
